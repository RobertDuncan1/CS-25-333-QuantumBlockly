import React, { useState, useEffect } from 'react';
import axios from 'axios';
import './TicTacToe.css'; // Import your CSS file or add styles directly here

const TicTacToe = ({ quboCode, log }) => {
  const [currentPlayer, setCurrentPlayer] = useState('X');
  const [cells, setCells] = useState(Array(9).fill(''));

  // Load the saved game state when the component mounts
  useEffect(() => {
    const savedState = loadGame();
    if (savedState) {
      setCells(savedState.cells);
      setCurrentPlayer(savedState.currentPlayer);
      log('> Game loaded from saved state\n\n');
    }
  }, []);

  useEffect(() => {
    var createQuboForSingleMove = () => {};
   
    if (currentPlayer === 'O') {
      const fetchData = async () => {
        try {
          eval(quboCode);
          const qubo = createQuboForSingleMove(cells);
          log('> QUBO Generated by Blockly Code\n\n');
          const response = await axios.post('http://localhost:8000/quantum', qubo); // Make async post request to the server
          if (response.data && response.data.solution !== undefined && response.data.energy !== undefined) {
            setTimeout(() => { 
              handleCellClick(response.data.solution); 
              log(`> Quantum Server calculated O placement at cell ${response.data.solution} based on QUBO generated from Blockly Workspace\n\n`);
            }, 500);
          } else {
            log('> Quantum Server Error, QUBO is likely in an invalid format or code hasn`t been generated yet\n\n');
          }
        } catch (error) {
          console.log(error.message);
          log('> Quantum Server Error, QUBO is likely in an invalid format or code hasn`t been generated yet\n\n');
        }
      };
      
      fetchData();
    }
  }, [currentPlayer, cells]);

  const handleCellClick = (index) => {
    if (!cells[index]) {
      const newCells = [...cells];
      newCells[index] = currentPlayer;
      setCells(newCells);
      log(`> Placed ${currentPlayer} at cell ${index}\n\n`);

      if (checkWinner(newCells)) {
        alert(`${currentPlayer} wins!`);
        resetBoard();
      } else if (checkDraw(newCells)) {
        alert("It's a draw!");
        resetBoard();
      } else {
        setCurrentPlayer(currentPlayer === 'X' ? 'O' : 'X');
      }

      saveGame({ cells: newCells, currentPlayer: currentPlayer === 'X' ? 'O' : 'X' });
    }
  };

  const checkWinner = (currentCells) => {
    const winningCombos = [
      [0, 1, 2],
      [3, 4, 5],
      [6, 7, 8],
      [0, 3, 6],
      [1, 4, 7],
      [2, 5, 8],
      [0, 4, 8],
      [2, 4, 6]
    ];

    return winningCombos.some(combo => {
      return combo.every(index => currentCells[index] === currentPlayer);
    });
  };

  const checkDraw = (currentCells) => {
    return currentCells.every(cell => cell);
  };

  const resetBoard = () => {
    setCells(Array(9).fill(''));
    setCurrentPlayer('X');
    log('> Board has been reset \n\n');
  };

  const saveGame = (state) => {
    localStorage.setItem('ticTacToeGameState', JSON.stringify(state));
    log('> Game state saved\n\n');
  };

  const loadGame = () => {
    const savedState = localStorage.getItem('ticTacToeGameState');
    return savedState ? JSON.parse(savedState) : null;
  };

  const handleLoadGame = () => {
    const savedState = loadGame();
    if (savedState) {
      setCells(savedState.cells);
      setCurrentPlayer(savedState.currentPlayer);
      log('> Game loaded from saved state\n\n');
    } else {
      log('> No saved game found\n\n');
      alert('No saved game found.');
    }
  };

  const clearSavedGame = () => {
    localStorage.removeItem('ticTacToeGameState');
    log('> Saved game has been cleared\n\n');
    alert('Saved game has been cleared.');
  };

  return (
    <div className="container">
      <h1>Tic Tac Toe</h1>
      <div className="board">
        {cells.map((cell, index) => (
          <div
            key={index}
            className="cell"
            onClick={() => handleCellClick(index)}
          >
            {cell}
          </div>
        ))}
      </div>
      <div className="controls">
        <button onClick={resetBoard}>Reset</button>
        <button onClick={() => saveGame({ cells, currentPlayer })}>Save</button>
        <button onClick={handleLoadGame}>Load</button>
        <button onClick={clearSavedGame}>Clear Save</button>
      </div>
    </div>
  );
};

export default TicTacToe;

import React, { useState, useEffect } from 'react';
import axios from 'axios';
import './Connect4.css'; // Import your CSS file or add styles directly here
import { COLLAPSED_FIELD_NAME } from 'blockly';

const Connect4 = ({quboCode, log}) => {
  const [currentPlayer, setCurrentPlayer] = useState('X');
  const [cells, setCells] = useState(Array(42).fill(''));

  useEffect(() => {
    var createQuboForSingleMove = () => {};
   
    if (currentPlayer === 'O') {
      const fetchData = async () => {
        try {
          eval(quboCode);
          const qubo = createQuboForSingleMove(cells);
          log('> QUBO Generated by Blockly Code\n\n')
          const response = await axios.post('http://localhost:8000/quantum', qubo); //make async post request to the server
          if (response.data && response.data.solution !== undefined && response.data.energy !== undefined) {
            setTimeout(() => { handleCellClick(response.data.solution); log(`> Quantum Server calculated O placement at cell ${response.data.solution} based on QUBO generated from Blockly Workspace\n\n`)}, 500);
          } else {
            // Handle the case where the expected property is not present in the response
            log('> Quantum Server Error, QUBO is likely in an invalid format or code hasn`t been generated yet\n\n');
          }
        } catch(error) {
            console.log(error.message);
            log('> Quantum Server Error, QUBO is likely in an invalid format or code hasn`t been generated yet\n\n');
        }
      };
      
      fetchData();
    }
  }, [currentPlayer, cells])

  const handleCellClick = (index) => {
    while (index >= 7) {
        index -= 7;
    }

    while (!cells[index] && index <= 41) {
        index += 7;
    }
    index -= 7;

    if (!cells[index]) {
        
      const newCells = [...cells];
      newCells[index] = currentPlayer;
      setCells(newCells);
      log(`> Placed ${currentPlayer} at cell ${index}\n\n`);

      if (checkWinner(index)) {
        alert(`${currentPlayer} wins!`);
        resetBoard();
      } else if (checkDraw(newCells)) {
        alert("It's a draw!");
        resetBoard();
      } else {
        setCurrentPlayer(currentPlayer === 'X' ? 'O' : 'X');
      }
    }
  };

  const checkWinner = (index) => {
    const directions = [
        { r: 0, c: 1 },  // Horizontal
        { r: 7, c: 0 },  // Vertical
        { r: 7, c: 1 },  // Diagonal down-right
        { r: 7, c: -1 }  // Diagonal down-left
    ];

    for (let { r, c } of directions) {
        let count = 1;
        count += countConsecutive(index, r, c);
        count += countConsecutive(index, -r, -c);
        if (count >= 4) {
            return true;
        }
    }
    return false;
  };

  function countConsecutive(index, rowDir, colDir) {
    let checkIndex = index + rowDir + colDir;
    let count = 0;
    while (checkIndex >= 0 && checkIndex <= 41 && cells[checkIndex] === currentPlayer) {
        count++;
        checkIndex += rowDir;
        checkIndex += colDir;
    }
    return count;
}

  const checkDraw = (currentCells) => {
    return currentCells.every(cell => cell);
  };

  const resetBoard = () => {
    setCells(Array(42).fill(''));
    setCurrentPlayer('X');
    log('> Board has been reset \n\n');
  };

  return (
    <div className="container">
      <h1>Connect 4</h1>
      <div className="board">
        {cells.map((cell, index) => (
          <div
            key={index}
            className="cell"
            onClick={() => handleCellClick(index)}
          >
            {cell}
          </div>
        ))}
      </div>
      <button onClick={resetBoard}>Reset</button>
    </div>
  );
};

export default Connect4;

import React, { useState, useEffect } from 'react';
import axios from 'axios';
import './TicTacToe.css';

const TicTacToe = ({ quboCode, log }) => {
  const [gameSetup, setGameSetup] = useState(false);
  const [player1Type, setPlayer1Type] = useState('Human');
  const [player2Type, setPlayer2Type] = useState('Quantum CPU');
  const [currentPlayer, setCurrentPlayer] = useState('X');
  const [cells, setCells] = useState(Array(9).fill(''));

  useEffect(() => {
    // Automated turn logic with delay for CPU vs Quantum CPU
    if (gameSetup) {
      if (currentPlayer === 'X' && player1Type === 'CPU') {
        setTimeout(handleCPUMove, 500); // 500ms delay for CPU move
      } else if (currentPlayer === 'O' && player2Type === 'Quantum CPU') {
        setTimeout(fetchQuantumMove, 500); // 500ms delay for Quantum CPU move
      } else if (currentPlayer === 'O' && player2Type === 'CPU') {
        setTimeout(handleCPUMove, 500); // 500ms delay if Player 2 is a CPU
      }
    }
  }, [currentPlayer, gameSetup]);

  const startGame = () => {
    setGameSetup(true);
    setCells(Array(9).fill('')); // Reset board
    setCurrentPlayer('X'); // X always starts
    log('> Game started\n\n');
  };

  const handleCellClick = (index) => {
    if (cells[index] || gameSetup === false) return;

    // Allow human player to make a move if it's their turn
    if (
      (currentPlayer === 'X' && player1Type === 'Human') ||
      (currentPlayer === 'O' && player2Type === 'Human')
    ) {
      makeMove(index);
    }
  };

  const makeMove = (index, player = currentPlayer) => {
    const newCells = [...cells];
    newCells[index] = player;
    setCells(newCells);
    log(`> Placed ${player} at cell ${index}\n\n`);

    if (checkWinner(newCells)) {
      alert(`${player} wins!`);
      resetToSetup();
    } else if (checkDraw(newCells)) {
      alert("It's a draw!");
      resetToSetup();
    } else {
      setCurrentPlayer(player === 'X' ? 'O' : 'X');
    }

    saveGame({ cells: newCells, currentPlayer: player === 'X' ? 'O' : 'X' });
  };

  const handleCPUMove = () => {
    // CPU picks a random available cell
    const availableCells = cells.map((cell, index) => cell === '' ? index : null).filter(index => index !== null);
    const randomCell = availableCells[Math.floor(Math.random() * availableCells.length)];
    makeMove(randomCell);
  };

  const fetchQuantumMove = async () => {
    var createQuboForSingleMove = () => {};

    try {
      eval(quboCode); // Generate the QUBO creation function dynamically

      if (typeof createQuboForSingleMove !== 'function') {
        throw new Error("createQuboForSingleMove is not defined or not a function.");
      }

      const qubo = createQuboForSingleMove(cells); // Create QUBO matrix for current game state
      log('> QUBO Generated by Blockly Code\n\n');

      const response = await axios.post('http://localhost:8000/quantum', qubo);

      if (response.data && response.data.solution !== undefined && response.data.energy !== undefined) {
        makeMove(response.data.solution, 'O');
        log(`> Quantum Server calculated O placement at cell ${response.data.solution} based on QUBO generated from Blockly Workspace\n\n`);
      } else {
        log('> Quantum Server Error: Invalid response format or missing data.\n\n');
      }
    } catch (error) {
      console.error("Quantum Server Error:", error.message);
      log('> Quantum Server Error: QUBO format may be invalid, or server connection error occurred.\n\n');
    }
  };

  const checkWinner = (currentCells) => {
    const winningCombos = [
      [0, 1, 2],
      [3, 4, 5],
      [6, 7, 8],
      [0, 3, 6],
      [1, 4, 7],
      [2, 5, 8],
      [0, 4, 8],
      [2, 4, 6]
    ];

    return winningCombos.some(combo => {
      return combo.every(index => currentCells[index] === currentPlayer);
    });
  };

  const checkDraw = (currentCells) => {
    return currentCells.every(cell => cell);
  };

  const resetToSetup = () => {
    setCells(Array(9).fill(''));
    setCurrentPlayer('X');
    setGameSetup(false); // Go back to player setup
    log('> Game reset to setup screen\n\n');
  };

  const saveGame = (state) => {
    localStorage.setItem('ticTacToeGameState', JSON.stringify(state));
    log('> Game state saved\n\n');
  };

  const loadGame = () => {
    const savedState = localStorage.getItem('ticTacToeGameState');
    return savedState ? JSON.parse(savedState) : null;
  };

  const handleLoadGame = () => {
    const savedState = loadGame();
    if (savedState) {
      setCells(savedState.cells);
      setCurrentPlayer(savedState.currentPlayer);
      setGameSetup(true); // Go directly to the game if a save is loaded
      log('> Game loaded from saved state\n\n');
    } else {
      alert('No saved game found.');
      log('> No saved game found\n\n');
    }
  };

  const clearSavedGame = () => {
    localStorage.removeItem('ticTacToeGameState');
    alert('Saved game cleared.');
    log('> Saved game cleared\n\n');
  };

  return (
    <div className="container">
      <h1>Tic Tac Toe</h1>

      {gameSetup ? (
        <>
          <div className="board">
            {cells.map((cell, index) => (
              <div
                key={index}
                className="cell"
                onClick={() => handleCellClick(index)}
              >
                {cell}
              </div>
            ))}
          </div>

          <div className="controls">
            <button onClick={resetToSetup}>Reset to Setup</button>
            <button onClick={() => saveGame({ cells, currentPlayer })}>Save</button>
            <button onClick={handleLoadGame}>Load</button>
            <button onClick={clearSavedGame}>Clear Save</button>
          </div>
        </>
      ) : (
        <div className="setup">
          <h2>Choose Player Types</h2>
          <label>
            Player 1 (X):
            <select value={player1Type} onChange={(e) => setPlayer1Type(e.target.value)}>
              <option value="Human">Human</option>
              <option value="CPU">CPU</option>
            </select>
          </label>
          <label>
            Player 2 (O):
            <select value={player2Type} onChange={(e) => setPlayer2Type(e.target.value)}>
              <option value="Human">Human</option>
              <option value="CPU">CPU</option>
              <option value="Quantum CPU">Quantum CPU</option>
            </select>
          </label>
          <button onClick={startGame}>Start Game</button>
        </div>
      )}
    </div>
  );
};

export default TicTacToe;
